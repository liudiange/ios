//
//  KeyHandle.h
//  BitMainWallet_Hot
//
//  Created by xunianqiang on 15-1-15.
//  Copyright (c) 2015年 xunianqiang. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <CoreGraphics/CoreGraphics.h>

@interface KeyHandle : NSObject


/**
 * Create a new private key
 *
 */
+ (NSString *)creatNewPrivkey;

/**
 * data to hexstring
 *
 */
+ (NSString *)hexStringFromData:(NSData *)myD;

/**
 * hex to data
 *
 */
+ (NSData *)hexStringToData:(NSString *)hex;

/**
 * get raw privkey
 *
 */
+ (NSString *)getRawPrivkey:(NSString *)privkey;

/**
 * Create a new private key
 *
 */
+ (NSString *)creatNewPrivkeyByRandomStr:(NSString *)randomStr;

/**
 * Get the public key through the private key
 *
 */
+ (NSString *)createPubkeyByPrikey:(NSString *)prikey;

/**
 * A method of obtaining an address from a private key
 *
 */
+ (NSString *)getAddressByPrivKey:(NSString *)prvkey;

/**
 * Get the address through the public key
 *
 */
+ (NSString *)getAddressByPubkey:(NSString *)pubkey;

/**
 * Generate random numbers
 *
 */
+ (NSData *)createRandom512bits;

/**
 * decode encypt prikey with password
 *
 */
+ (NSDictionary *)decodePrikeyGetDict:(NSString *)encodeStr withPassword:(NSString *)password;

/**
   * Encrypt private key
   *
   * @param privkey user private key
   * @param user_id ID of the 8-bit byte generated by the user ID server
   * @param password user password
   *
   * @return
 */
+ (NSString *)getEncodePrikey:(NSString *)privkey withBitAddress:(NSString *)bitAddress password:(NSString *)password;

/**
 * Check the legitimacy of the private key
 *
 */
+ (BOOL)checkPrivkey:(NSString *)privkey;

/**
 *  Check the legitimacy of the address
 *
 */
+ (BOOL)checkAddress:(NSString *)address;

+ (NSString *)getHash256:(NSString *)string;

/**
 *  ECDH shared key generation
 */
+ (NSString *)getECDHkeyUsePrivkey:(NSString *)privkey PublicKey:(NSString *)pubkey;

#pragma mark AES encryption and decryption functions

+ (NSDictionary *)xtalkEncodeAES_GCM:(NSString *)password data:(NSString *)dataStr aad:(NSString *)add iv:(NSString *)iv;

+ (NSDictionary *)xtalkEncodeAES_GCM:(NSString *)password withNSdata:(NSData *)data aad:(NSString *)aad iv:(NSString *)iv;

+ (NSString *)xtalkDecodeAES_GCM:(NSString *)password data:(NSString *)dataStr aad:(NSString *)add iv:(NSString *)iv tag:(NSString *)tagin;

+ (NSData *)xtalkDecodeAES_GCMWithPassword:(NSString *)password data:(NSString *)dataStr aad:(NSString *)aad iv:(NSString *)iv tag:(NSString *)tagin;

#pragma mark - Signature verification signature function

+ (NSString *)signHashWithPrivkey:(NSString *)privkey data:(NSString *)data;

+ (BOOL)verifyWithPublicKey:(NSString *)publicKey originData:(NSString *)data signData:(NSString *)signData;

#pragma mark - Obtain the private key via the encryption string and password

+ (NSString *)getBtcPrivKeyFromRawPrivKey:(NSString *)rawPrivkey;

/**
 *  local encrypt password
 */
+ (NSString *)getPassByPrikey:(NSString *)prikey;

#pragma mark - wallet

/**
     Signature trading
   *
   * @param tvsArray
   * @param privkeys
   * @param rawTranscation
   *
   * @return
 */
+ (NSString *)signRawTranscationWithTvsArray:(NSArray *)tvsArray privkeys:(NSArray *)privkeys rawTranscation:(NSString *)rawTranscation;

/**
   * Create the original transaction
   *
   * @param tvsArray
   * @param
 *
 *  @return 
 */
+ (NSString *)createRawTranscationWithTvsArray:(NSArray *)tvsArray outputs:(NSDictionary *)outputs;

#pragma mark - Encryption decryption method

+ (NSDictionary *)xtalkEncodeAES_GCMWithPassword:(NSData *)password originData:(NSData *)data aad:(NSData *)aad;

+ (NSData *)getECDHkeyWithPrivkey:(NSString *)privkey publicKey:(NSString *)pubkey;

+ (NSData *)getAes256KeyByECDHKeyAndSalt:(NSData *)password salt:(NSData *)salt;

+ (NSData *)xtalkDecodeAES_GCMDataWithPassword:(NSData *)password data:(NSData *)data aad:(NSData *)aad iv:(NSData *)iv tag:(NSData *)tag;

@end
