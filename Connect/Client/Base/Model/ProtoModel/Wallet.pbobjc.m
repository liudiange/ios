// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wallet.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Wallet.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - WalletRoot

@implementation WalletRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - WalletRoot_FileDescriptor

static GPBFileDescriptor *WalletRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"wallet"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RequestWalletInfo

@implementation RequestWalletInfo

@dynamic checkSum;
@dynamic payload;
@dynamic salt;
@dynamic n;
@dynamic wid;
@dynamic version;

typedef struct RequestWalletInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t n;
  int32_t version;
  NSString *checkSum;
  NSString *payload;
  NSString *salt;
  NSString *wid;
} RequestWalletInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "checkSum",
        .dataTypeSpecific.className = NULL,
        .number = RequestWalletInfo_FieldNumber_CheckSum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestWalletInfo__storage_, checkSum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payload",
        .dataTypeSpecific.className = NULL,
        .number = RequestWalletInfo_FieldNumber_Payload,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestWalletInfo__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "salt",
        .dataTypeSpecific.className = NULL,
        .number = RequestWalletInfo_FieldNumber_Salt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestWalletInfo__storage_, salt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "n",
        .dataTypeSpecific.className = NULL,
        .number = RequestWalletInfo_FieldNumber_N,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RequestWalletInfo__storage_, n),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wid",
        .dataTypeSpecific.className = NULL,
        .number = RequestWalletInfo_FieldNumber_Wid,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RequestWalletInfo__storage_, wid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = RequestWalletInfo_FieldNumber_Version,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RequestWalletInfo__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestWalletInfo class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestWalletInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestUserInfo

@implementation RequestUserInfo

@dynamic uid;

typedef struct RequestUserInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *uid;
} RequestUserInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = RequestUserInfo_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestUserInfo__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestUserInfo class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestUserInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
