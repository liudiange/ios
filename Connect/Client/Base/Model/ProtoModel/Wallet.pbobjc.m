// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wallet.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Wallet.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - WalletRoot

@implementation WalletRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - WalletRoot_FileDescriptor

static GPBFileDescriptor *WalletRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"wallet"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RequestWalletInfo

@implementation RequestWalletInfo

@dynamic checkSum;
@dynamic payload;
@dynamic salt;
@dynamic n;
@dynamic wid;
@dynamic version;

typedef struct RequestWalletInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t n;
  int32_t version;
  NSString *checkSum;
  NSString *payload;
  NSString *salt;
  NSString *wid;
} RequestWalletInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "checkSum",
        .dataTypeSpecific.className = NULL,
        .number = RequestWalletInfo_FieldNumber_CheckSum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestWalletInfo__storage_, checkSum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payload",
        .dataTypeSpecific.className = NULL,
        .number = RequestWalletInfo_FieldNumber_Payload,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestWalletInfo__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "salt",
        .dataTypeSpecific.className = NULL,
        .number = RequestWalletInfo_FieldNumber_Salt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestWalletInfo__storage_, salt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "n",
        .dataTypeSpecific.className = NULL,
        .number = RequestWalletInfo_FieldNumber_N,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RequestWalletInfo__storage_, n),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wid",
        .dataTypeSpecific.className = NULL,
        .number = RequestWalletInfo_FieldNumber_Wid,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RequestWalletInfo__storage_, wid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = RequestWalletInfo_FieldNumber_Version,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RequestWalletInfo__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestWalletInfo class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestWalletInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestUserInfo

@implementation RequestUserInfo

@dynamic uid;

typedef struct RequestUserInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *uid;
} RequestUserInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = RequestUserInfo_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestUserInfo__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestUserInfo class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestUserInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Address

@implementation Address

@dynamic address;

typedef struct Address__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
} Address__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Address__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Address class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Address__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Balance

@implementation Balance

@dynamic amount;
@dynamic pending;

typedef struct Balance__storage_ {
  uint32_t _has_storage_[1];
  int64_t amount;
  int64_t pending;
} Balance__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = Balance_FieldNumber_Amount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Balance__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pending",
        .dataTypeSpecific.className = NULL,
        .number = Balance_FieldNumber_Pending,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Balance__storage_, pending),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Balance class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Balance__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Wallet

@implementation Wallet

@dynamic pbkdf2Iterations;
@dynamic version;
@dynamic uuid;
@dynamic payLoad;
@dynamic salt;

typedef struct Wallet__storage_ {
  uint32_t _has_storage_[1];
  int32_t pbkdf2Iterations;
  int32_t version;
  NSString *uuid;
  NSString *payLoad;
  NSString *salt;
} Wallet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pbkdf2Iterations",
        .dataTypeSpecific.className = NULL,
        .number = Wallet_FieldNumber_Pbkdf2Iterations,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Wallet__storage_, pbkdf2Iterations),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = Wallet_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Wallet__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = Wallet_FieldNumber_Uuid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Wallet__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payLoad",
        .dataTypeSpecific.className = NULL,
        .number = Wallet_FieldNumber_PayLoad,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Wallet__storage_, payLoad),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "salt",
        .dataTypeSpecific.className = NULL,
        .number = Wallet_FieldNumber_Salt,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Wallet__storage_, salt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Wallet class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Wallet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Coin

@implementation Coin

@dynamic status;
@dynamic currency;
@dynamic category;
@dynamic salt;
@dynamic balance;
@dynamic wId;
@dynamic payload;

typedef struct Coin__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  int32_t currency;
  int32_t category;
  NSString *salt;
  NSString *wId;
  NSString *payload;
  int64_t balance;
} Coin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = Coin_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Coin__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "currency",
        .dataTypeSpecific.className = NULL,
        .number = Coin_FieldNumber_Currency,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Coin__storage_, currency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "category",
        .dataTypeSpecific.className = NULL,
        .number = Coin_FieldNumber_Category,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Coin__storage_, category),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "salt",
        .dataTypeSpecific.className = NULL,
        .number = Coin_FieldNumber_Salt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Coin__storage_, salt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "balance",
        .dataTypeSpecific.className = NULL,
        .number = Coin_FieldNumber_Balance,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Coin__storage_, balance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "wId",
        .dataTypeSpecific.className = NULL,
        .number = Coin_FieldNumber_WId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Coin__storage_, wId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payload",
        .dataTypeSpecific.className = NULL,
        .number = Coin_FieldNumber_Payload,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Coin__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Coin class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Coin__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Coins

@implementation Coins

@dynamic coinsArray, coinsArray_Count;

typedef struct Coins__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *coinsArray;
} Coins__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "coinsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Coin),
        .number = Coins_FieldNumber_CoinsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Coins__storage_, coinsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Coins class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Coins__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000Coins\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CoinsDetail

@implementation CoinsDetail

@dynamic hasCoin, coin;
@dynamic coinInfosArray, coinInfosArray_Count;

typedef struct CoinsDetail__storage_ {
  uint32_t _has_storage_[1];
  Coin *coin;
  NSMutableArray *coinInfosArray;
} CoinsDetail__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "coin",
        .dataTypeSpecific.className = GPBStringifySymbol(Coin),
        .number = CoinsDetail_FieldNumber_Coin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CoinsDetail__storage_, coin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "coinInfosArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CoinInfo),
        .number = CoinsDetail_FieldNumber_CoinInfosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CoinsDetail__storage_, coinInfosArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CoinsDetail class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CoinsDetail__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000coinInfos\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CoinInfo

@implementation CoinInfo

@dynamic index;
@dynamic status;
@dynamic address;
@dynamic label;
@dynamic balance;

typedef struct CoinInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
  int32_t status;
  NSString *address;
  NSString *label;
  int64_t balance;
} CoinInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = CoinInfo_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CoinInfo__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = CoinInfo_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CoinInfo__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = CoinInfo_FieldNumber_Address,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CoinInfo__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "label",
        .dataTypeSpecific.className = NULL,
        .number = CoinInfo_FieldNumber_Label,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CoinInfo__storage_, label),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "balance",
        .dataTypeSpecific.className = NULL,
        .number = CoinInfo_FieldNumber_Balance,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CoinInfo__storage_, balance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CoinInfo class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CoinInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RespSyncWallet

@implementation RespSyncWallet

@dynamic hasWallet, wallet;
@dynamic status;
@dynamic coinsArray, coinsArray_Count;

typedef struct RespSyncWallet__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  Wallet *wallet;
  NSMutableArray *coinsArray;
} RespSyncWallet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "wallet",
        .dataTypeSpecific.className = GPBStringifySymbol(Wallet),
        .number = RespSyncWallet_FieldNumber_Wallet,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RespSyncWallet__storage_, wallet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = RespSyncWallet_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RespSyncWallet__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "coinsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CoinsDetail),
        .number = RespSyncWallet_FieldNumber_CoinsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RespSyncWallet__storage_, coinsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RespSyncWallet class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RespSyncWallet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\000Coins\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Txin

@implementation Txin

@dynamic addressesArray, addressesArray_Count;

typedef struct Txin__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *addressesArray;
} Txin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addressesArray",
        .dataTypeSpecific.className = NULL,
        .number = Txin_FieldNumber_AddressesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Txin__storage_, addressesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Txin class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Txin__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Txout

@implementation Txout

@dynamic address;
@dynamic amount;

typedef struct Txout__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  int64_t amount;
} Txout__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = Txout_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Txout__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = Txout_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Txout__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Txout class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Txout__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendCurrency

@implementation SendCurrency

@dynamic currency;
@dynamic hasTxin, txin;

typedef struct SendCurrency__storage_ {
  uint32_t _has_storage_[1];
  int32_t currency;
  Txin *txin;
} SendCurrency__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "currency",
        .dataTypeSpecific.className = NULL,
        .number = SendCurrency_FieldNumber_Currency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendCurrency__storage_, currency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "txin",
        .dataTypeSpecific.className = GPBStringifySymbol(Txin),
        .number = SendCurrency_FieldNumber_Txin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendCurrency__storage_, txin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendCurrency class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendCurrency__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LuckyPackageRequest

@implementation LuckyPackageRequest

@dynamic hasSendCurrency, sendCurrency;
@dynamic reciverIdentifier;
@dynamic packageType;
@dynamic size;
@dynamic amount;
@dynamic fee;
@dynamic tips;

typedef struct LuckyPackageRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t packageType;
  int32_t size;
  SendCurrency *sendCurrency;
  NSString *reciverIdentifier;
  NSString *tips;
  int64_t amount;
  int64_t fee;
} LuckyPackageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sendCurrency",
        .dataTypeSpecific.className = GPBStringifySymbol(SendCurrency),
        .number = LuckyPackageRequest_FieldNumber_SendCurrency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LuckyPackageRequest__storage_, sendCurrency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reciverIdentifier",
        .dataTypeSpecific.className = NULL,
        .number = LuckyPackageRequest_FieldNumber_ReciverIdentifier,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LuckyPackageRequest__storage_, reciverIdentifier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "packageType",
        .dataTypeSpecific.className = NULL,
        .number = LuckyPackageRequest_FieldNumber_PackageType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LuckyPackageRequest__storage_, packageType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = LuckyPackageRequest_FieldNumber_Size,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LuckyPackageRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = LuckyPackageRequest_FieldNumber_Amount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LuckyPackageRequest__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fee",
        .dataTypeSpecific.className = NULL,
        .number = LuckyPackageRequest_FieldNumber_Fee,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(LuckyPackageRequest__storage_, fee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tips",
        .dataTypeSpecific.className = NULL,
        .number = LuckyPackageRequest_FieldNumber_Tips,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(LuckyPackageRequest__storage_, tips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LuckyPackageRequest class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LuckyPackageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - URLTransferRequest

@implementation URLTransferRequest

@dynamic hasSendCurrency, sendCurrency;
@dynamic amount;
@dynamic fee;

typedef struct URLTransferRequest__storage_ {
  uint32_t _has_storage_[1];
  SendCurrency *sendCurrency;
  int64_t amount;
  int64_t fee;
} URLTransferRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sendCurrency",
        .dataTypeSpecific.className = GPBStringifySymbol(SendCurrency),
        .number = URLTransferRequest_FieldNumber_SendCurrency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(URLTransferRequest__storage_, sendCurrency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = URLTransferRequest_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(URLTransferRequest__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fee",
        .dataTypeSpecific.className = NULL,
        .number = URLTransferRequest_FieldNumber_Fee,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(URLTransferRequest__storage_, fee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[URLTransferRequest class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(URLTransferRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferRequest

@implementation TransferRequest

@dynamic hasSendCurrency, sendCurrency;
@dynamic outPutsArray, outPutsArray_Count;
@dynamic fee;
@dynamic transferType;
@dynamic tips;

typedef struct TransferRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t transferType;
  SendCurrency *sendCurrency;
  NSMutableArray *outPutsArray;
  NSString *tips;
  int64_t fee;
} TransferRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sendCurrency",
        .dataTypeSpecific.className = GPBStringifySymbol(SendCurrency),
        .number = TransferRequest_FieldNumber_SendCurrency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferRequest__storage_, sendCurrency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "outPutsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Txout),
        .number = TransferRequest_FieldNumber_OutPutsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TransferRequest__storage_, outPutsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fee",
        .dataTypeSpecific.className = NULL,
        .number = TransferRequest_FieldNumber_Fee,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferRequest__storage_, fee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "transferType",
        .dataTypeSpecific.className = NULL,
        .number = TransferRequest_FieldNumber_TransferType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransferRequest__storage_, transferType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tips",
        .dataTypeSpecific.className = NULL,
        .number = TransferRequest_FieldNumber_Tips,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TransferRequest__storage_, tips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferRequest class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CrowdfuningRequest

@implementation CrowdfuningRequest

@dynamic groupIdentifier;
@dynamic amount;
@dynamic size;
@dynamic tips;

typedef struct CrowdfuningRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t size;
  NSString *groupIdentifier;
  NSString *tips;
  int64_t amount;
} CrowdfuningRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupIdentifier",
        .dataTypeSpecific.className = NULL,
        .number = CrowdfuningRequest_FieldNumber_GroupIdentifier,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CrowdfuningRequest__storage_, groupIdentifier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = CrowdfuningRequest_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CrowdfuningRequest__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = CrowdfuningRequest_FieldNumber_Size,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CrowdfuningRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tips",
        .dataTypeSpecific.className = NULL,
        .number = CrowdfuningRequest_FieldNumber_Tips,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CrowdfuningRequest__storage_, tips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CrowdfuningRequest class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CrowdfuningRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReceiptRequest

@implementation ReceiptRequest

@dynamic payer;
@dynamic amount;
@dynamic tips;

typedef struct ReceiptRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *payer;
  NSString *tips;
  int64_t amount;
} ReceiptRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payer",
        .dataTypeSpecific.className = NULL,
        .number = ReceiptRequest_FieldNumber_Payer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReceiptRequest__storage_, payer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = ReceiptRequest_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReceiptRequest__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tips",
        .dataTypeSpecific.className = NULL,
        .number = ReceiptRequest_FieldNumber_Tips,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReceiptRequest__storage_, tips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReceiptRequest class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReceiptRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReceiptResp

@implementation ReceiptResp

@dynamic hashId;

typedef struct ReceiptResp__storage_ {
  uint32_t _has_storage_[1];
  NSString *hashId;
} ReceiptResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hashId",
        .dataTypeSpecific.className = NULL,
        .number = ReceiptResp_FieldNumber_HashId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReceiptResp__storage_, hashId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReceiptResp class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReceiptResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PayCrowdReceipt

@implementation PayCrowdReceipt

@dynamic hasSendCurrency, sendCurrency;
@dynamic receiptType;
@dynamic hashId;

typedef struct PayCrowdReceipt__storage_ {
  uint32_t _has_storage_[1];
  int32_t receiptType;
  SendCurrency *sendCurrency;
  NSString *hashId;
} PayCrowdReceipt__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sendCurrency",
        .dataTypeSpecific.className = GPBStringifySymbol(SendCurrency),
        .number = PayCrowdReceipt_FieldNumber_SendCurrency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PayCrowdReceipt__storage_, sendCurrency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "receiptType",
        .dataTypeSpecific.className = NULL,
        .number = PayCrowdReceipt_FieldNumber_ReceiptType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PayCrowdReceipt__storage_, receiptType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hashId",
        .dataTypeSpecific.className = NULL,
        .number = PayCrowdReceipt_FieldNumber_HashId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PayCrowdReceipt__storage_, hashId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PayCrowdReceipt class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PayCrowdReceipt__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OriginalTransaction

@implementation OriginalTransaction

@dynamic hashId;
@dynamic rawhex;
@dynamic vts;
@dynamic addressesArray, addressesArray_Count;

typedef struct OriginalTransaction__storage_ {
  uint32_t _has_storage_[1];
  NSString *hashId;
  NSString *rawhex;
  NSString *vts;
  NSMutableArray *addressesArray;
} OriginalTransaction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hashId",
        .dataTypeSpecific.className = NULL,
        .number = OriginalTransaction_FieldNumber_HashId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OriginalTransaction__storage_, hashId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rawhex",
        .dataTypeSpecific.className = NULL,
        .number = OriginalTransaction_FieldNumber_Rawhex,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OriginalTransaction__storage_, rawhex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "vts",
        .dataTypeSpecific.className = NULL,
        .number = OriginalTransaction_FieldNumber_Vts,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OriginalTransaction__storage_, vts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addressesArray",
        .dataTypeSpecific.className = NULL,
        .number = OriginalTransaction_FieldNumber_AddressesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OriginalTransaction__storage_, addressesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OriginalTransaction class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OriginalTransaction__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PublishTransaction

@implementation PublishTransaction

@dynamic transactionType;
@dynamic hashId;
@dynamic txHex;

typedef struct PublishTransaction__storage_ {
  uint32_t _has_storage_[1];
  int32_t transactionType;
  NSString *hashId;
  NSString *txHex;
} PublishTransaction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionType",
        .dataTypeSpecific.className = NULL,
        .number = PublishTransaction_FieldNumber_TransactionType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PublishTransaction__storage_, transactionType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hashId",
        .dataTypeSpecific.className = NULL,
        .number = PublishTransaction_FieldNumber_HashId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PublishTransaction__storage_, hashId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "txHex",
        .dataTypeSpecific.className = NULL,
        .number = PublishTransaction_FieldNumber_TxHex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PublishTransaction__storage_, txHex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PublishTransaction class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PublishTransaction__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransactionFlowingRequest

@implementation TransactionFlowingRequest

@dynamic currency;

typedef struct TransactionFlowingRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t currency;
} TransactionFlowingRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "currency",
        .dataTypeSpecific.className = NULL,
        .number = TransactionFlowingRequest_FieldNumber_Currency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransactionFlowingRequest__storage_, currency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransactionFlowingRequest class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransactionFlowingRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransactionFlowing

@implementation TransactionFlowing

@dynamic status;
@dynamic category;
@dynamic amount;
@dynamic time;
@dynamic avatar;
@dynamic username;
@dynamic address;
@dynamic txid;

typedef struct TransactionFlowing__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  int32_t category;
  NSString *avatar;
  NSString *username;
  NSString *address;
  NSString *txid;
  int64_t amount;
  int64_t time;
} TransactionFlowing__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = TransactionFlowing_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransactionFlowing__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "category",
        .dataTypeSpecific.className = NULL,
        .number = TransactionFlowing_FieldNumber_Category,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransactionFlowing__storage_, category),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = TransactionFlowing_FieldNumber_Amount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransactionFlowing__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = TransactionFlowing_FieldNumber_Time,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TransactionFlowing__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.className = NULL,
        .number = TransactionFlowing_FieldNumber_Avatar,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TransactionFlowing__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "username",
        .dataTypeSpecific.className = NULL,
        .number = TransactionFlowing_FieldNumber_Username,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TransactionFlowing__storage_, username),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = TransactionFlowing_FieldNumber_Address,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TransactionFlowing__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "txid",
        .dataTypeSpecific.className = NULL,
        .number = TransactionFlowing_FieldNumber_Txid,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TransactionFlowing__storage_, txid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransactionFlowing class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransactionFlowing__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransactionFlowings

@implementation TransactionFlowings

@dynamic transactionHistoryArray, transactionHistoryArray_Count;

typedef struct TransactionFlowings__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *transactionHistoryArray;
} TransactionFlowings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionHistoryArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TransactionFlowing),
        .number = TransactionFlowings_FieldNumber_TransactionHistoryArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TransactionFlowings__storage_, transactionHistoryArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransactionFlowings class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransactionFlowings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateCoin

@implementation CreateCoin

@dynamic category;
@dynamic currency;
@dynamic salt;
@dynamic masterAddress;
@dynamic payload;

typedef struct CreateCoin__storage_ {
  uint32_t _has_storage_[1];
  int32_t category;
  int32_t currency;
  NSString *salt;
  NSString *masterAddress;
  NSString *payload;
} CreateCoin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "category",
        .dataTypeSpecific.className = NULL,
        .number = CreateCoin_FieldNumber_Category,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateCoin__storage_, category),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "currency",
        .dataTypeSpecific.className = NULL,
        .number = CreateCoin_FieldNumber_Currency,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateCoin__storage_, currency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "salt",
        .dataTypeSpecific.className = NULL,
        .number = CreateCoin_FieldNumber_Salt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreateCoin__storage_, salt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "masterAddress",
        .dataTypeSpecific.className = NULL,
        .number = CreateCoin_FieldNumber_MasterAddress,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CreateCoin__storage_, masterAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payload",
        .dataTypeSpecific.className = NULL,
        .number = CreateCoin_FieldNumber_Payload,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CreateCoin__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateCoin class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateCoin__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestCreateCoinInfo

@implementation RequestCreateCoinInfo

@dynamic index;
@dynamic status;
@dynamic address;
@dynamic label;
@dynamic currency;
@dynamic wId;

typedef struct RequestCreateCoinInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
  int32_t status;
  int32_t currency;
  NSString *address;
  NSString *label;
  NSString *wId;
} RequestCreateCoinInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = RequestCreateCoinInfo_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestCreateCoinInfo__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = RequestCreateCoinInfo_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestCreateCoinInfo__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = RequestCreateCoinInfo_FieldNumber_Address,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestCreateCoinInfo__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "label",
        .dataTypeSpecific.className = NULL,
        .number = RequestCreateCoinInfo_FieldNumber_Label,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RequestCreateCoinInfo__storage_, label),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "currency",
        .dataTypeSpecific.className = NULL,
        .number = RequestCreateCoinInfo_FieldNumber_Currency,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RequestCreateCoinInfo__storage_, currency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wId",
        .dataTypeSpecific.className = NULL,
        .number = RequestCreateCoinInfo_FieldNumber_WId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RequestCreateCoinInfo__storage_, wId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestCreateCoinInfo class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestCreateCoinInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DefaultAddress

@implementation DefaultAddress

@dynamic currency;
@dynamic address;

typedef struct DefaultAddress__storage_ {
  uint32_t _has_storage_[1];
  int32_t currency;
  NSString *address;
} DefaultAddress__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "currency",
        .dataTypeSpecific.className = NULL,
        .number = DefaultAddress_FieldNumber_Currency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DefaultAddress__storage_, currency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = DefaultAddress_FieldNumber_Address,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DefaultAddress__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DefaultAddress class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DefaultAddress__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListDefaultAddress

@implementation ListDefaultAddress

@dynamic defaultAddressesArray, defaultAddressesArray_Count;

typedef struct ListDefaultAddress__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *defaultAddressesArray;
} ListDefaultAddress__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "defaultAddressesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DefaultAddress),
        .number = ListDefaultAddress_FieldNumber_DefaultAddressesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListDefaultAddress__storage_, defaultAddressesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListDefaultAddress class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListDefaultAddress__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000defaultAddresses\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
