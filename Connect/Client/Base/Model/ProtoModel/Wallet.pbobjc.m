// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wallet.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Wallet.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - WalletRoot

@implementation WalletRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - WalletRoot_FileDescriptor

static GPBFileDescriptor *WalletRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"wallet"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RequestWalletInfo

@implementation RequestWalletInfo

@dynamic payload;
@dynamic pbkdf2Iterations;
@dynamic checkSum;
@dynamic version;

typedef struct RequestWalletInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t pbkdf2Iterations;
  int32_t version;
  NSString *payload;
  NSString *checkSum;
} RequestWalletInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payload",
        .dataTypeSpecific.className = NULL,
        .number = RequestWalletInfo_FieldNumber_Payload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestWalletInfo__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pbkdf2Iterations",
        .dataTypeSpecific.className = NULL,
        .number = RequestWalletInfo_FieldNumber_Pbkdf2Iterations,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestWalletInfo__storage_, pbkdf2Iterations),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "checkSum",
        .dataTypeSpecific.className = NULL,
        .number = RequestWalletInfo_FieldNumber_CheckSum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestWalletInfo__storage_, checkSum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = RequestWalletInfo_FieldNumber_Version,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RequestWalletInfo__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestWalletInfo class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestWalletInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RespSyncWallet

@implementation RespSyncWallet

@dynamic hasWallet, wallet;
@dynamic status;
@dynamic coinsArray, coinsArray_Count;

typedef struct RespSyncWallet__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  Wallet *wallet;
  NSMutableArray *coinsArray;
} RespSyncWallet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "wallet",
        .dataTypeSpecific.className = GPBStringifySymbol(Wallet),
        .number = RespSyncWallet_FieldNumber_Wallet,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RespSyncWallet__storage_, wallet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = RespSyncWallet_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RespSyncWallet__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "coinsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Coin),
        .number = RespSyncWallet_FieldNumber_CoinsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RespSyncWallet__storage_, coinsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RespSyncWallet class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RespSyncWallet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Wallet

@implementation Wallet

@dynamic payLoad;
@dynamic version;
@dynamic pbkdf2Iterations;
@dynamic checkSum;

typedef struct Wallet__storage_ {
  uint32_t _has_storage_[1];
  int32_t version;
  int32_t pbkdf2Iterations;
  NSString *payLoad;
  NSString *checkSum;
} Wallet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payLoad",
        .dataTypeSpecific.className = NULL,
        .number = Wallet_FieldNumber_PayLoad,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Wallet__storage_, payLoad),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = Wallet_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Wallet__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pbkdf2Iterations",
        .dataTypeSpecific.className = NULL,
        .number = Wallet_FieldNumber_Pbkdf2Iterations,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Wallet__storage_, pbkdf2Iterations),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "checkSum",
        .dataTypeSpecific.className = NULL,
        .number = Wallet_FieldNumber_CheckSum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Wallet__storage_, checkSum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Wallet class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Wallet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Balance

@implementation Balance

@dynamic amount;
@dynamic pending;

typedef struct Balance__storage_ {
  uint32_t _has_storage_[1];
  int64_t amount;
  int64_t pending;
} Balance__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = Balance_FieldNumber_Amount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Balance__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pending",
        .dataTypeSpecific.className = NULL,
        .number = Balance_FieldNumber_Pending,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Balance__storage_, pending),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Balance class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Balance__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Coin

@implementation Coin

@dynamic currency;
@dynamic payload;
@dynamic salt;
@dynamic balance;
@dynamic status;
@dynamic category;

typedef struct Coin__storage_ {
  uint32_t _has_storage_[1];
  int32_t currency;
  int32_t status;
  int32_t category;
  NSString *payload;
  NSString *salt;
  int64_t balance;
} Coin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "currency",
        .dataTypeSpecific.className = NULL,
        .number = Coin_FieldNumber_Currency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Coin__storage_, currency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "payload",
        .dataTypeSpecific.className = NULL,
        .number = Coin_FieldNumber_Payload,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Coin__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "salt",
        .dataTypeSpecific.className = NULL,
        .number = Coin_FieldNumber_Salt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Coin__storage_, salt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "balance",
        .dataTypeSpecific.className = NULL,
        .number = Coin_FieldNumber_Balance,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Coin__storage_, balance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = Coin_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Coin__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "category",
        .dataTypeSpecific.className = NULL,
        .number = Coin_FieldNumber_Category,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Coin__storage_, category),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Coin class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Coin__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Coins

@implementation Coins

@dynamic coinsArray, coinsArray_Count;

typedef struct Coins__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *coinsArray;
} Coins__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "coinsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Coin),
        .number = Coins_FieldNumber_CoinsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Coins__storage_, coinsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Coins class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Coins__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000Coins\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CoinsDetail

@implementation CoinsDetail

@dynamic hasCoin, coin;
@dynamic coinInfosArray, coinInfosArray_Count;

typedef struct CoinsDetail__storage_ {
  uint32_t _has_storage_[1];
  Coin *coin;
  NSMutableArray *coinInfosArray;
} CoinsDetail__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "coin",
        .dataTypeSpecific.className = GPBStringifySymbol(Coin),
        .number = CoinsDetail_FieldNumber_Coin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CoinsDetail__storage_, coin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "coinInfosArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CoinInfo),
        .number = CoinsDetail_FieldNumber_CoinInfosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CoinsDetail__storage_, coinInfosArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CoinsDetail class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CoinsDetail__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000coinInfos\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CoinInfo

@implementation CoinInfo

@dynamic index;
@dynamic address;
@dynamic label;
@dynamic balance;
@dynamic status;

typedef struct CoinInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
  int32_t status;
  NSString *address;
  NSString *label;
  int64_t balance;
} CoinInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = CoinInfo_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CoinInfo__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = CoinInfo_FieldNumber_Address,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CoinInfo__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "label",
        .dataTypeSpecific.className = NULL,
        .number = CoinInfo_FieldNumber_Label,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CoinInfo__storage_, label),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "balance",
        .dataTypeSpecific.className = NULL,
        .number = CoinInfo_FieldNumber_Balance,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CoinInfo__storage_, balance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = CoinInfo_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CoinInfo__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CoinInfo class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CoinInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateCoinRequest

@implementation CreateCoinRequest

@dynamic currency;
@dynamic masterAddress;
@dynamic salt;
@dynamic payload;
@dynamic category;

typedef struct CreateCoinRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t currency;
  int32_t category;
  NSString *masterAddress;
  NSString *salt;
  NSString *payload;
} CreateCoinRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "currency",
        .dataTypeSpecific.className = NULL,
        .number = CreateCoinRequest_FieldNumber_Currency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateCoinRequest__storage_, currency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "masterAddress",
        .dataTypeSpecific.className = NULL,
        .number = CreateCoinRequest_FieldNumber_MasterAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateCoinRequest__storage_, masterAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "salt",
        .dataTypeSpecific.className = NULL,
        .number = CreateCoinRequest_FieldNumber_Salt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreateCoinRequest__storage_, salt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payload",
        .dataTypeSpecific.className = NULL,
        .number = CreateCoinRequest_FieldNumber_Payload,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CreateCoinRequest__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "category",
        .dataTypeSpecific.className = NULL,
        .number = CreateCoinRequest_FieldNumber_Category,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CreateCoinRequest__storage_, category),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateCoinRequest class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateCoinRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateCoinAccount

@implementation CreateCoinAccount

@dynamic index;
@dynamic address;
@dynamic label;
@dynamic status;
@dynamic currency;

typedef struct CreateCoinAccount__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
  int32_t status;
  int32_t currency;
  NSString *address;
  NSString *label;
} CreateCoinAccount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = CreateCoinAccount_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateCoinAccount__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = CreateCoinAccount_FieldNumber_Address,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateCoinAccount__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "label",
        .dataTypeSpecific.className = NULL,
        .number = CreateCoinAccount_FieldNumber_Label,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreateCoinAccount__storage_, label),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = CreateCoinAccount_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CreateCoinAccount__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "currency",
        .dataTypeSpecific.className = NULL,
        .number = CreateCoinAccount_FieldNumber_Currency,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CreateCoinAccount__storage_, currency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateCoinAccount class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateCoinAccount__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Txin

@implementation Txin

@dynamic addressesArray, addressesArray_Count;

typedef struct Txin__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *addressesArray;
} Txin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addressesArray",
        .dataTypeSpecific.className = NULL,
        .number = Txin_FieldNumber_AddressesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Txin__storage_, addressesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Txin class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Txin__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Txout

@implementation Txout

@dynamic address;
@dynamic amount;

typedef struct Txout__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  int64_t amount;
} Txout__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = Txout_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Txout__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = Txout_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Txout__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Txout class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Txout__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SpentCurrency

@implementation SpentCurrency

@dynamic currency;
@dynamic hasTxin, txin;

typedef struct SpentCurrency__storage_ {
  uint32_t _has_storage_[1];
  int32_t currency;
  Txin *txin;
} SpentCurrency__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "currency",
        .dataTypeSpecific.className = NULL,
        .number = SpentCurrency_FieldNumber_Currency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SpentCurrency__storage_, currency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "txin",
        .dataTypeSpecific.className = GPBStringifySymbol(Txin),
        .number = SpentCurrency_FieldNumber_Txin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SpentCurrency__storage_, txin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SpentCurrency class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SpentCurrency__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LuckyPackageRequest

@implementation LuckyPackageRequest

@dynamic hasSpentCurrency, spentCurrency;
@dynamic reciverIdentifier;
@dynamic typ;
@dynamic size;
@dynamic amount;
@dynamic fee;
@dynamic tips;

typedef struct LuckyPackageRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t typ;
  int32_t size;
  SpentCurrency *spentCurrency;
  NSString *reciverIdentifier;
  NSString *tips;
  int64_t amount;
  int64_t fee;
} LuckyPackageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spentCurrency",
        .dataTypeSpecific.className = GPBStringifySymbol(SpentCurrency),
        .number = LuckyPackageRequest_FieldNumber_SpentCurrency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LuckyPackageRequest__storage_, spentCurrency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reciverIdentifier",
        .dataTypeSpecific.className = NULL,
        .number = LuckyPackageRequest_FieldNumber_ReciverIdentifier,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LuckyPackageRequest__storage_, reciverIdentifier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "typ",
        .dataTypeSpecific.className = NULL,
        .number = LuckyPackageRequest_FieldNumber_Typ,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LuckyPackageRequest__storage_, typ),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = LuckyPackageRequest_FieldNumber_Size,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LuckyPackageRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = LuckyPackageRequest_FieldNumber_Amount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LuckyPackageRequest__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fee",
        .dataTypeSpecific.className = NULL,
        .number = LuckyPackageRequest_FieldNumber_Fee,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(LuckyPackageRequest__storage_, fee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tips",
        .dataTypeSpecific.className = NULL,
        .number = LuckyPackageRequest_FieldNumber_Tips,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(LuckyPackageRequest__storage_, tips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LuckyPackageRequest class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LuckyPackageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - URLTransferRequest

@implementation URLTransferRequest

@dynamic hasSpentCurrency, spentCurrency;
@dynamic amount;
@dynamic fee;

typedef struct URLTransferRequest__storage_ {
  uint32_t _has_storage_[1];
  SpentCurrency *spentCurrency;
  int64_t amount;
  int64_t fee;
} URLTransferRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spentCurrency",
        .dataTypeSpecific.className = GPBStringifySymbol(SpentCurrency),
        .number = URLTransferRequest_FieldNumber_SpentCurrency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(URLTransferRequest__storage_, spentCurrency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = URLTransferRequest_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(URLTransferRequest__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fee",
        .dataTypeSpecific.className = NULL,
        .number = URLTransferRequest_FieldNumber_Fee,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(URLTransferRequest__storage_, fee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[URLTransferRequest class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(URLTransferRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferRequest

@implementation TransferRequest

@dynamic hasSpentCurrency, spentCurrency;
@dynamic txOutArray, txOutArray_Count;
@dynamic fee;
@dynamic tips;

typedef struct TransferRequest__storage_ {
  uint32_t _has_storage_[1];
  SpentCurrency *spentCurrency;
  NSMutableArray *txOutArray;
  NSString *tips;
  int64_t fee;
} TransferRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spentCurrency",
        .dataTypeSpecific.className = GPBStringifySymbol(SpentCurrency),
        .number = TransferRequest_FieldNumber_SpentCurrency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferRequest__storage_, spentCurrency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "txOutArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Txout),
        .number = TransferRequest_FieldNumber_TxOutArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TransferRequest__storage_, txOutArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fee",
        .dataTypeSpecific.className = NULL,
        .number = TransferRequest_FieldNumber_Fee,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferRequest__storage_, fee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tips",
        .dataTypeSpecific.className = NULL,
        .number = TransferRequest_FieldNumber_Tips,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransferRequest__storage_, tips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferRequest class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CrowdfuningRequest

@implementation CrowdfuningRequest

@dynamic currency;
@dynamic groupIdentifier;
@dynamic perAmount;
@dynamic size;
@dynamic tips;

typedef struct CrowdfuningRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t size;
  NSString *currency;
  NSString *groupIdentifier;
  NSString *tips;
  int64_t perAmount;
} CrowdfuningRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "currency",
        .dataTypeSpecific.className = NULL,
        .number = CrowdfuningRequest_FieldNumber_Currency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CrowdfuningRequest__storage_, currency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupIdentifier",
        .dataTypeSpecific.className = NULL,
        .number = CrowdfuningRequest_FieldNumber_GroupIdentifier,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CrowdfuningRequest__storage_, groupIdentifier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "perAmount",
        .dataTypeSpecific.className = NULL,
        .number = CrowdfuningRequest_FieldNumber_PerAmount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CrowdfuningRequest__storage_, perAmount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = CrowdfuningRequest_FieldNumber_Size,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CrowdfuningRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tips",
        .dataTypeSpecific.className = NULL,
        .number = CrowdfuningRequest_FieldNumber_Tips,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CrowdfuningRequest__storage_, tips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CrowdfuningRequest class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CrowdfuningRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReceiptRequest

@implementation ReceiptRequest

@dynamic currency;
@dynamic payer;
@dynamic amount;
@dynamic tips;

typedef struct ReceiptRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *currency;
  NSString *payer;
  NSString *tips;
  int64_t amount;
} ReceiptRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "currency",
        .dataTypeSpecific.className = NULL,
        .number = ReceiptRequest_FieldNumber_Currency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReceiptRequest__storage_, currency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payer",
        .dataTypeSpecific.className = NULL,
        .number = ReceiptRequest_FieldNumber_Payer,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReceiptRequest__storage_, payer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = ReceiptRequest_FieldNumber_Amount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReceiptRequest__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tips",
        .dataTypeSpecific.className = NULL,
        .number = ReceiptRequest_FieldNumber_Tips,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ReceiptRequest__storage_, tips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReceiptRequest class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReceiptRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HashIdResp

@implementation HashIdResp

@dynamic hashId;

typedef struct HashIdResp__storage_ {
  uint32_t _has_storage_[1];
  NSString *hashId;
} HashIdResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hashId",
        .dataTypeSpecific.className = NULL,
        .number = HashIdResp_FieldNumber_HashId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HashIdResp__storage_, hashId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HashIdResp class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HashIdResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Pay

@implementation Pay

@dynamic hasSpentCurrency, spentCurrency;
@dynamic payType;
@dynamic hashId;

typedef struct Pay__storage_ {
  uint32_t _has_storage_[1];
  int32_t payType;
  SpentCurrency *spentCurrency;
  NSString *hashId;
} Pay__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spentCurrency",
        .dataTypeSpecific.className = GPBStringifySymbol(SpentCurrency),
        .number = Pay_FieldNumber_SpentCurrency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Pay__storage_, spentCurrency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "payType",
        .dataTypeSpecific.className = NULL,
        .number = Pay_FieldNumber_PayType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Pay__storage_, payType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hashId",
        .dataTypeSpecific.className = NULL,
        .number = Pay_FieldNumber_HashId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Pay__storage_, hashId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Pay class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Pay__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OriginalTransactionResponse

@implementation OriginalTransactionResponse

@dynamic code;
@dynamic hasData_p, data_p;
@dynamic message;

typedef struct OriginalTransactionResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  OriginalTransaction *data_p;
  NSString *message;
} OriginalTransactionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = OriginalTransactionResponse_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OriginalTransactionResponse__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(OriginalTransaction),
        .number = OriginalTransactionResponse_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OriginalTransactionResponse__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = OriginalTransactionResponse_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OriginalTransactionResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OriginalTransactionResponse class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OriginalTransactionResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OriginalTransaction

@implementation OriginalTransaction

@dynamic hashId;
@dynamic rawhex;
@dynamic vts;
@dynamic fee;
@dynamic addressesArray, addressesArray_Count;

typedef struct OriginalTransaction__storage_ {
  uint32_t _has_storage_[1];
  NSString *hashId;
  NSString *rawhex;
  NSString *vts;
  NSMutableArray *addressesArray;
  int64_t fee;
} OriginalTransaction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hashId",
        .dataTypeSpecific.className = NULL,
        .number = OriginalTransaction_FieldNumber_HashId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OriginalTransaction__storage_, hashId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rawhex",
        .dataTypeSpecific.className = NULL,
        .number = OriginalTransaction_FieldNumber_Rawhex,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OriginalTransaction__storage_, rawhex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "vts",
        .dataTypeSpecific.className = NULL,
        .number = OriginalTransaction_FieldNumber_Vts,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OriginalTransaction__storage_, vts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fee",
        .dataTypeSpecific.className = NULL,
        .number = OriginalTransaction_FieldNumber_Fee,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OriginalTransaction__storage_, fee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "addressesArray",
        .dataTypeSpecific.className = NULL,
        .number = OriginalTransaction_FieldNumber_AddressesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OriginalTransaction__storage_, addressesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OriginalTransaction class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OriginalTransaction__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PublishTransaction

@implementation PublishTransaction

@dynamic transactionType;
@dynamic hashId;
@dynamic txHex;
@dynamic currency;

typedef struct PublishTransaction__storage_ {
  uint32_t _has_storage_[1];
  int32_t transactionType;
  int32_t currency;
  NSString *hashId;
  NSString *txHex;
} PublishTransaction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionType",
        .dataTypeSpecific.className = NULL,
        .number = PublishTransaction_FieldNumber_TransactionType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PublishTransaction__storage_, transactionType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hashId",
        .dataTypeSpecific.className = NULL,
        .number = PublishTransaction_FieldNumber_HashId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PublishTransaction__storage_, hashId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "txHex",
        .dataTypeSpecific.className = NULL,
        .number = PublishTransaction_FieldNumber_TxHex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PublishTransaction__storage_, txHex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "currency",
        .dataTypeSpecific.className = NULL,
        .number = PublishTransaction_FieldNumber_Currency,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PublishTransaction__storage_, currency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PublishTransaction class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PublishTransaction__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransactionFlowingRequest

@implementation TransactionFlowingRequest

@dynamic currency;
@dynamic page;
@dynamic size;

typedef struct TransactionFlowingRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t currency;
  int32_t page;
  int32_t size;
} TransactionFlowingRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "currency",
        .dataTypeSpecific.className = NULL,
        .number = TransactionFlowingRequest_FieldNumber_Currency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransactionFlowingRequest__storage_, currency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = TransactionFlowingRequest_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransactionFlowingRequest__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = TransactionFlowingRequest_FieldNumber_Size,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransactionFlowingRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransactionFlowingRequest class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransactionFlowingRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransactionFlowing

@implementation TransactionFlowing

@dynamic time;
@dynamic username;
@dynamic address;
@dynamic avatar;
@dynamic amount;
@dynamic txid;
@dynamic status;
@dynamic category;

typedef struct TransactionFlowing__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  int32_t category;
  NSString *username;
  NSString *address;
  NSString *avatar;
  NSString *txid;
  int64_t time;
  int64_t amount;
} TransactionFlowing__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = TransactionFlowing_FieldNumber_Time,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransactionFlowing__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "username",
        .dataTypeSpecific.className = NULL,
        .number = TransactionFlowing_FieldNumber_Username,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransactionFlowing__storage_, username),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = TransactionFlowing_FieldNumber_Address,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransactionFlowing__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.className = NULL,
        .number = TransactionFlowing_FieldNumber_Avatar,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TransactionFlowing__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = TransactionFlowing_FieldNumber_Amount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TransactionFlowing__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "txid",
        .dataTypeSpecific.className = NULL,
        .number = TransactionFlowing_FieldNumber_Txid,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TransactionFlowing__storage_, txid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = TransactionFlowing_FieldNumber_Status,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TransactionFlowing__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "category",
        .dataTypeSpecific.className = NULL,
        .number = TransactionFlowing_FieldNumber_Category,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TransactionFlowing__storage_, category),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransactionFlowing class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransactionFlowing__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransactionFlowings

@implementation TransactionFlowings

@dynamic transactionHistoryArray, transactionHistoryArray_Count;

typedef struct TransactionFlowings__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *transactionHistoryArray;
} TransactionFlowings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionHistoryArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TransactionFlowing),
        .number = TransactionFlowings_FieldNumber_TransactionHistoryArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TransactionFlowings__storage_, transactionHistoryArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransactionFlowings class]
                                     rootClass:[WalletRoot class]
                                          file:WalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransactionFlowings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
